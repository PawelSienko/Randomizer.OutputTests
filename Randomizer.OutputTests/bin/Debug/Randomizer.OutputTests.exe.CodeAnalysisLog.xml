<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2019\professional\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="16.0">
 <Namespaces>
  <Namespace Name="Randomizer.OutputTests.Tests.Decimal">
   <Messages>
    <Message Id="Decimal" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="95" Level="Error">Rename namespace Randomizer.OutputTests.Tests.Decimal so that it no longer conflicts with the reserved language keyword 'Decimal'. Using a reserved keyword as the name of a namespace makes it harder for consumers in other languages to use the namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Randomizer.OutputTests.Tests.Double">
   <Messages>
    <Message Id="Double" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="95" Level="Error">Rename namespace Randomizer.OutputTests.Tests.Double so that it no longer conflicts with the reserved language keyword 'Double'. Using a reserved keyword as the name of a namespace makes it harder for consumers in other languages to use the namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Randomizer.OutputTests.Tests.Integer">
   <Messages>
    <Message Id="Integer" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="95" Level="Error">Rename namespace Randomizer.OutputTests.Tests.Integer so that it no longer conflicts with the reserved language keyword 'Integer'. Using a reserved keyword as the name of a namespace makes it harder for consumers in other languages to use the namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Randomizer.OutputTests.Tests.Long">
   <Messages>
    <Message Id="Long" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="95" Level="Error">Rename namespace Randomizer.OutputTests.Tests.Long so that it no longer conflicts with the reserved language keyword 'Long'. Using a reserved keyword as the name of a namespace makes it harder for consumers in other languages to use the namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Randomizer.OutputTests.Tests.Short">
   <Messages>
    <Message Id="Short" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="95" Level="Error">Rename namespace Randomizer.OutputTests.Tests.Short so that it no longer conflicts with the reserved language keyword 'Short'. Using a reserved keyword as the name of a namespace makes it harder for consumers in other languages to use the namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Randomizer.OutputTests.Tests.String">
   <Messages>
    <Message Id="String" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="95" Level="Error">Rename namespace Randomizer.OutputTests.Tests.String so that it no longer conflicts with the reserved language keyword 'String'. Using a reserved keyword as the name of a namespace makes it harder for consumers in other languages to use the namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\bin\Debug\Randomizer.OutputTests.exe">
   <Modules>
    <Module Name="randomizer.outputtests.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'Randomizer.OutputTests.exe' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'Randomizer.OutputTests.exe' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Randomizer.OutputTests">
       <Types>
        <Type Name="FileLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LogResult(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests" File="FileLogger.cs" Line="26">Replace method 'FileLogger.LogResult(IEnumerable&lt;string&gt;, string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests" File="FileLogger.cs" Line="26">In member 'FileLogger.LogResult(IEnumerable&lt;string&gt;, string, string)', change parameter name 'lines' to 'item' in order to match the identifier as it has been declared in 'ILogger.LogResult(IEnumerable&lt;string&gt;, string, string)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogResult(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests" File="FileLogger.cs" Line="39">In member 'FileLogger.LogResult(string)', change parameter name 'singleLine' to 'item' in order to match the identifier as it has been declared in 'ILogger.LogResult(string)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IConsoleManager" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PrintErrorMsg(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Msg' in member name 'IConsoleManager.PrintErrorMsg(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ILogger" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LogResult(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'ILogger.LogResult(IEnumerable&lt;string&gt;, string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Program" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Main(System.String[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests" File="Program.cs" Line="29">'Program.Main(string[])' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NotifyIfErrors()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Randomizer.OutputTests.IConsoleManager.PrintErrorMsg(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests" File="Program.cs" Line="110">Method 'Program.NotifyIfErrors()' passes a literal string as parameter 'message' of a call to 'IConsoleManager.PrintErrorMsg(string)'. Retrieve the following string(s) from a resource table instead: "Some errors occured. Please check location ".</Issue>
            </Message>
            <Message Id="occured" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests" File="Program.cs" Line="110">Correct the spelling of the unrecognized token 'occured' in the literal '"Some errors occured. Please check location "'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.Base">
       <Types>
        <Type Name="OutputTestBase`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#fileLogger" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OutputTestBase&lt;TType&gt;.fileLogger' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateConfitions(!0[])" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Confitions" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Base" File="OutputTestBase.cs" Line="22">Correct the spelling of 'Confitions' in member name 'OutputTestBase&lt;TType&gt;.ValidateConfitions(params TType[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WrongResults" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OutputTestBase&lt;TType&gt;.WrongResults' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'OutputTestBase&lt;TType&gt;.WrongResults' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestManagerBase`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Base" File="TestManagerBase.cs" Line="15">Replace method 'TestManagerBase&lt;TType&gt;.TestManagerBase(int)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecutionTimes" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'TestManagerBase&lt;TType&gt;.ExecutionTimes' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.TestManagers">
       <Types>
        <Type Name="AlphanumericCharTestManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;Randomizer.OutputTests.Base.OutputTestBase`1&lt;System.Char&gt;&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="AlphanumericCharTestManager.cs" Line="10">Replace method 'AlphanumericCharTestManager.AlphanumericCharTestManager(IEnumerable&lt;OutputTestBase&lt;char&gt;&gt;, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="AlphanumericCharTestManager.cs" Line="10">Consider a design where 'AlphanumericCharTestManager.AlphanumericCharTestManager(IEnumerable&lt;OutputTestBase&lt;char&gt;&gt;, int)' doesn't nest generic type 'IEnumerable&lt;OutputTestBase&lt;char&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AlphanumericStringTestManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;Randomizer.OutputTests.Base.OutputTestBase`1&lt;System.Object&gt;&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="AlphanumericStringTestManager.cs" Line="10">Replace method 'AlphanumericStringTestManager.AlphanumericStringTestManager(IEnumerable&lt;OutputTestBase&lt;object&gt;&gt;, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="AlphanumericStringTestManager.cs" Line="10">Consider a design where 'AlphanumericStringTestManager.AlphanumericStringTestManager(IEnumerable&lt;OutputTestBase&lt;object&gt;&gt;, int)' doesn't nest generic type 'IEnumerable&lt;OutputTestBase&lt;object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DateTimeTestManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;Randomizer.OutputTests.Base.OutputTestBase`1&lt;System.DateTime&gt;&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="DateTimeTestManager.cs" Line="11">Replace method 'DateTimeTestManager.DateTimeTestManager(IEnumerable&lt;OutputTestBase&lt;DateTime&gt;&gt;, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="DateTimeTestManager.cs" Line="11">Consider a design where 'DateTimeTestManager.DateTimeTestManager(IEnumerable&lt;OutputTestBase&lt;DateTime&gt;&gt;, int)' doesn't nest generic type 'IEnumerable&lt;OutputTestBase&lt;DateTime&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DecimalTestManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;Randomizer.OutputTests.Base.OutputTestBase`1&lt;System.Decimal&gt;&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="DecimalTestManager.cs" Line="10">Replace method 'DecimalTestManager.DecimalTestManager(IEnumerable&lt;OutputTestBase&lt;decimal&gt;&gt;, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="DecimalTestManager.cs" Line="10">Consider a design where 'DecimalTestManager.DecimalTestManager(IEnumerable&lt;OutputTestBase&lt;decimal&gt;&gt;, int)' doesn't nest generic type 'IEnumerable&lt;OutputTestBase&lt;decimal&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DoubleTestManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;Randomizer.OutputTests.Base.OutputTestBase`1&lt;System.Double&gt;&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="DoubleTestManager.cs" Line="10">Replace method 'DoubleTestManager.DoubleTestManager(IEnumerable&lt;OutputTestBase&lt;double&gt;&gt;, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="DoubleTestManager.cs" Line="10">Consider a design where 'DoubleTestManager.DoubleTestManager(IEnumerable&lt;OutputTestBase&lt;double&gt;&gt;, int)' doesn't nest generic type 'IEnumerable&lt;OutputTestBase&lt;double&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FloatTestManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;Randomizer.OutputTests.Base.OutputTestBase`1&lt;System.Single&gt;&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="FloatTestManager.cs" Line="10">Replace method 'FloatTestManager.FloatTestManager(IEnumerable&lt;OutputTestBase&lt;float&gt;&gt;, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="FloatTestManager.cs" Line="10">Consider a design where 'FloatTestManager.FloatTestManager(IEnumerable&lt;OutputTestBase&lt;float&gt;&gt;, int)' doesn't nest generic type 'IEnumerable&lt;OutputTestBase&lt;float&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IntegerTestManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;Randomizer.OutputTests.Base.OutputTestBase`1&lt;System.Int32&gt;&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="IntegerTestManager.cs" Line="9">Replace method 'IntegerTestManager.IntegerTestManager(IEnumerable&lt;OutputTestBase&lt;int&gt;&gt;, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="IntegerTestManager.cs" Line="9">Consider a design where 'IntegerTestManager.IntegerTestManager(IEnumerable&lt;OutputTestBase&lt;int&gt;&gt;, int)' doesn't nest generic type 'IEnumerable&lt;OutputTestBase&lt;int&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ITestManager`1" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddExecutable(System.Collections.Generic.IList`1&lt;Randomizer.OutputTests.Base.OutputTestBase`1&lt;!0&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'ITestManager&lt;TType&gt;.AddExecutable(IList&lt;OutputTestBase&lt;TType&gt;&gt;)' doesn't nest generic type 'IList&lt;OutputTestBase&lt;TType&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteAll(!0[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Params" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ITestManager&lt;TType&gt;.ExecuteAll(params TType[])', correct the spelling of 'Params' in parameter name 'inputParams' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LongTestManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;Randomizer.OutputTests.Base.OutputTestBase`1&lt;System.Int64&gt;&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="LongTestManager.cs" Line="10">Replace method 'LongTestManager.LongTestManager(IEnumerable&lt;OutputTestBase&lt;long&gt;&gt;, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="LongTestManager.cs" Line="10">Consider a design where 'LongTestManager.LongTestManager(IEnumerable&lt;OutputTestBase&lt;long&gt;&gt;, int)' doesn't nest generic type 'IEnumerable&lt;OutputTestBase&lt;long&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ShortTestManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;Randomizer.OutputTests.Base.OutputTestBase`1&lt;System.Int16&gt;&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="ShortTestManager.cs" Line="10">Replace method 'ShortTestManager.ShortTestManager(IEnumerable&lt;OutputTestBase&lt;short&gt;&gt;, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="ShortTestManager.cs" Line="10">Consider a design where 'ShortTestManager.ShortTestManager(IEnumerable&lt;OutputTestBase&lt;short&gt;&gt;, int)' doesn't nest generic type 'IEnumerable&lt;OutputTestBase&lt;short&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringTestManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;Randomizer.OutputTests.Base.OutputTestBase`1&lt;System.Object&gt;&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="StringTestManager.cs" Line="10">Replace method 'StringTestManager.StringTestManager(IEnumerable&lt;OutputTestBase&lt;object&gt;&gt;, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\TestManagers" File="StringTestManager.cs" Line="10">Consider a design where 'StringTestManager.StringTestManager(IEnumerable&lt;OutputTestBase&lt;object&gt;&gt;, int)' doesn't nest generic type 'IEnumerable&lt;OutputTestBase&lt;object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.Tests.AlphanumericChar">
       <Types>
        <Type Name="AlphanumericCharInRangeOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.Char[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'AlphanumericCharInRangeOutputTest.PerformTest(params char[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AlphanumericCharOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#randomCharacter" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AlphanumericCharOutputTest.randomCharacter' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.Tests.AlphanumericString">
       <Types>
        <Type Name="AlphanumericStringApartFromOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\AlphanumericString" File="AlphanumericStringApartFromOutputTest.cs" Line="17">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'AlphanumericStringApartFromOutputTest.PerformTest(params object[])' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\AlphanumericString" File="AlphanumericStringApartFromOutputTest.cs" Line="17">In externally visible method 'AlphanumericStringApartFromOutputTest.PerformTest(params object[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AlphanumericStringOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#IsLetterOrDigit(System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\AlphanumericString" File="AlphanumericStringOutputTest.cs" Line="21">The 'this' parameter (or 'Me' in Visual Basic) of 'AlphanumericStringOutputTest.IsLetterOrDigit(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\AlphanumericString" File="AlphanumericStringOutputTest.cs" Line="22">In externally visible method 'AlphanumericStringOutputTest.IsLetterOrDigit(string)', validate parameter 'randomValue' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RandomAlphanumericString" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'AlphanumericStringOutputTest.RandomAlphanumericString' or change the field to one that is an immutable reference type. If the reference type 'IRandomAlphanumericString' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AlphanumericStringOutputTest.RandomAlphanumericString' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.Tests.DateTime">
       <Types>
        <Type Name="DateTimeFebruaryOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.DateTime[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\DateTime" File="DateTimeFebruaryOutputTest.cs" Line="35">Modify 'DateTimeFebruaryOutputTest.PerformTest(params DateTime[])' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DateTimeInRangeOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformParameterlessTest()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\DateTime" File="DateTimeInRangeOutputTest.cs" Line="70">Modify 'DateTimeInRangeOutputTest.PerformParameterlessTest()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="ex" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\DateTime" File="DateTimeInRangeOutputTest.cs" Line="70">'DateTimeInRangeOutputTest.PerformParameterlessTest()' declares a variable, 'ex', of type 'Exception', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.Tests.Decimal">
       <Types>
        <Type Name="DecimalInRangeOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.Decimal[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\Decimal" File="DecimalInRangeOutputTest.cs" Line="25">In externally visible method 'DecimalInRangeOutputTest.PerformTest(params decimal[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.Tests.Double">
       <Types>
        <Type Name="DoubleInRangeOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.Double[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'DoubleInRangeOutputTest.PerformTest(params double[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.Tests.Float">
       <Types>
        <Type Name="FloatInRangeOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.Single[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'FloatInRangeOutputTest.PerformTest(params float[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.Tests.Integer">
       <Types>
        <Type Name="IntegerInRangeOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.Int32[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\Integer" File="IntegerInRangeOutputTest.cs" Line="21">In externally visible method 'IntegerInRangeOutputTest.PerformTest(params int[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.Tests.Long">
       <Types>
        <Type Name="LongInRangeOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.Int64[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\Long" File="LongInRangeOutputTest.cs" Line="20">In externally visible method 'LongInRangeOutputTest.PerformTest(params long[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.Tests.Short">
       <Types>
        <Type Name="ShortInRangeOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.Int16[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'ShortInRangeOutputTest.PerformTest(params short[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.Tests.String">
       <Types>
        <Type Name="StringApartFromOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\String" File="StringApartFromOutputTest.cs" Line="17">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'StringApartFromOutputTest.PerformTest(params object[])' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\String" File="StringApartFromOutputTest.cs" Line="17">In externally visible method 'StringApartFromOutputTest.PerformTest(params object[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringFixedLengthOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\String" File="StringFixedLengthOutputTest.cs" Line="16">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'StringFixedLengthOutputTest.PerformTest(params object[])' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\String" File="StringFixedLengthOutputTest.cs" Line="16">In externally visible method 'StringFixedLengthOutputTest.PerformTest(params object[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringLowercaseOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\String" File="StringLowercaseOutputTest.cs" Line="16">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'StringLowercaseOutputTest.PerformTest(params object[])' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\String" File="StringLowercaseOutputTest.cs" Line="16">In externally visible method 'StringLowercaseOutputTest.PerformTest(params object[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#randomString" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'StringOutputTest.randomString' or change the field to one that is an immutable reference type. If the reference type 'IRandomString' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StringOutputTest.randomString' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringUppercaseOutputTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PerformTest(System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\String" File="StringUppercaseOutputTest.cs" Line="16">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'StringUppercaseOutputTest.PerformTest(params object[])' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Tests\String" File="StringUppercaseOutputTest.cs" Line="16">In externally visible method 'StringUppercaseOutputTest.PerformTest(params object[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Randomizer.OutputTests.Unity">
       <Types>
        <Type Name="UnityBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#unityContainer" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'UnityBase.unityContainer' or change the field to one that is an immutable reference type. If the reference type 'UnityContainer' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UnityBase.unityContainer' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UnityConfiguration" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Configure()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Unity" File="UnityConfiguration.cs" Line="15">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UnityConfiguration.Configure()' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UnityLoggers" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#RegisterLogger(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="basePath" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Unity" File="UnityLoggers.cs" Line="65">'basePath', a parameter declared in 'UnityLoggers.RegisterLogger(string, string, string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UnityOutputTests" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#RegisterTypes()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2021-05-22 17:06:24Z" FixCategory="Breaking">
             <Issue Name="Method" Certainty="90" Level="Error" Path="C:\Users\WT392VB\OneDrive - EY\Desktop\Randomizer.NET\Tests\Randomizer.OutputTests\Unity" File="UnityOutputTests.cs" Line="28">'UnityOutputTests.RegisterTypes()' is coupled with 50 different types from 14 different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above 40 indicates poor maintainability, a class coupling between 40 and 30 indicates moderate maintainability, and a class coupling below 30 indicates good maintainability.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506">
   <Name>Avoid excessive class coupling</Name>
   <Description>Types and methods with a high degree of class coupling can be difficult to maintain.</Description>
   <Resolution Name="Method">{0} is coupled with {1} different types from {2} different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above {3} indicates poor maintainability, a class coupling between {3} and {4} indicates moderate maintainability, and a class coupling below {4} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb397994.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026">
   <Name>Default parameters should not be used</Name>
   <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
   <Resolution Name="Default">Replace method {0} with an overload that supplies all default arguments.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182135.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104">
   <Name>Do not declare read only mutable reference types</Name>
   <Description>A read-only declaration for a mutable reference type does not prevent the field's instance data from being modified. For example, a read-only StringBuilder field declaration does not make sense, since the data encapsulated by the StringBuilder can be modified using the read-only reference.</Description>
   <Resolution Name="Default">Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182302.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Error</MessageLevel>
   <File Name="securityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806">
   <Name>Do not ignore method results</Name>
   <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
   <Resolution Name="TryParse">{0} calls {1} but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182273.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="Namespace">Rename namespace {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a namespace makes it harder for consumers in other languages to use the namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182248.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182278.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500">
   <Name>Variable names should not match field names</Name>
   <Description>Instance field and variable names should not be identical within the same scope.</Description>
   <Resolution Name="Parameter">{0}, a parameter declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182216.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="16.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
